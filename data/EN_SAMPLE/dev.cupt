# global.columns = ID FORM LEMMA UPOS XPOS FEATS HEAD DEPREL DEPS MISC PARSEME:MWE
# source_sent_id = . . 2769
# text = Like HTML, XML makes use of tags and attributes, but while HTML specifies what each tag and attribute means (and thus how the data between them will look in a browser), XML uses the tags only to delimit pieces of data, and leaves the interpretation of the data completely to the application that reads it.
1	Like	like	ADP	_	_	2	case	_	_	*
2	HTML	html	PROPN	SG-NOM	_	5	obl	_	SpaceAfter=No	*
3	,	,	PUNCT	Comma	_	5	punct	_	_	*
4	XML	xml	PROPN	SG-NOM	_	5	nsubj	_	_	*
5	makes	make	VERB	PRES	_	0	root	_	_	1:LVC.full
6	use	use	NOUN	SG-NOM	_	5	compound:prt	_	_	1
7	of	of	ADP	_	_	8	case	_	_	*
8	tags	tag	NOUN	PL-NOM	_	5	obl	_	_	*
9	and	and	CCONJ	_	_	10	cc	_	_	*
10	attributes	attribute	NOUN	PL-NOM	_	8	conj	_	SpaceAfter=No	*
11	,	,	PUNCT	Comma	_	5	punct	_	_	*
12	but	but	CCONJ	_	_	20	cc	_	_	*
13	while	while	SCONJ	_	_	15	mark	_	_	*
14	HTML	html	PROPN	SG-NOM	_	15	nsubj	_	_	*
15	specifies	specify	VERB	PRES	_	38	advcl	_	_	*
16	what	what	PRON	WH	_	21	obj	_	_	*
17	each	each	DET	TOT-SG	_	18	det	_	_	*
18	tag	tag	NOUN	SG-NOM	_	21	nsubj	_	_	*
19	and	and	CCONJ	_	_	20	cc	_	_	*
20	attribute	attribute	NOUN	SG-NOM	_	18	conj	_	_	*
21	means	mean	VERB	PRES	_	15	ccomp	_	_	*
22	(	(	PUNCT	LeftParenthesis	_	23	punct	_	SpaceAfter=No	*
23	and	and	CCONJ	_	_	31	cc	_	_	*
24	thus	thus	ADV	_	_	31	advmod	_	_	*
25	how	how	ADV	WH	_	31	mark	_	_	*
26	the	the	DET	DEF	_	27	det	_	_	*
27	data	data	NOUN	PL-NOM	_	31	nsubj	_	_	*
28	between	between	ADP	_	_	29	case	_	_	*
29	them	they	PRON	PERS-P3PL-ACC	_	27	nmod	_	_	*
30	will	will	AUX	PRES-AUX	_	31	aux	_	_	*
31	look	look	VERB	INF	_	15	conj	_	_	*
32	in	in	ADP	_	_	34	case	_	_	*
33	a	a	DET	IND-SG	_	34	det	_	_	*
34	browser	browser	NOUN	SG-NOM	_	31	obl	_	SpaceAfter=No	*
35	)	)	PUNCT	RightParenthesis	_	23	punct	_	SpaceAfter=No	*
36	,	,	PUNCT	Comma	_	5	punct	_	_	*
37	XML	xml	PROPN	SG-NOM	_	38	nsubj	_	_	*
38	uses	use	VERB	PRES	_	5	conj	_	_	*
39	the	the	DET	DEF	_	40	det	_	_	*
40	tags	tag	NOUN	PL-NOM	_	38	obj	_	_	*
41	only	only	ADV	_	_	43	advmod	_	_	*
42	to	to	PART	_	_	43	mark	_	_	*
43	delimit	delimit	VERB	INF	_	38	advcl	_	_	*
44	pieces	piece	NOUN	PL-NOM	_	43	obj	_	_	*
45	of	of	ADP	_	_	46	case	_	_	*
46	data	data	NOUN	PL-NOM	_	44	nmod	_	SpaceAfter=No	*
47	,	,	PUNCT	Comma	_	5	punct	_	_	*
48	and	and	CCONJ	_	_	49	cc	_	_	*
49	leaves	leave	VERB	PRES	_	5	conj	_	_	*
50	the	the	DET	DEF	_	51	det	_	_	*
51	interpretation	interpretation	NOUN	SG-NOM	_	49	obj	_	_	*
52	of	of	ADP	_	_	54	case	_	_	*
53	the	the	DET	DEF	_	54	det	_	_	*
54	data	data	NOUN	PL-NOM	_	51	nmod	_	_	*
55	completely	completely	ADV	_	_	56	advmod	_	_	*
56	to	to	ADP	_	_	58	case	_	_	*
57	the	the	DET	DEF	_	58	det	_	_	*
58	application	application	NOUN	SG-NOM	_	49	obl	_	_	*
59	that	that	SCONJ	REL	_	60	mark	_	_	*
60	reads	read	VERB	PRES	_	58	acl:relcl	_	_	*
61	it	it	PRON	PERS-SG	_	60	obj	_	SpaceAfter=No	*
62	.	.	PUNCT	Period	_	5	punct	_	_	*

# source_sent_id = . . 2798
# text = You can apply a filter to a row or column field to show the top or bottom n items based on a total.
1	You	you	PRON	PERS-P2	_	3	nsubj	_	_	*
2	can	can	AUX	PRES-AUX	_	3	aux	_	_	*
3	apply	apply	VERB	INF	_	0	root	_	_	2:LVC.full
4	a	a	DET	IND-SG	_	5	det	_	_	*
5	filter	filter	NOUN	SG-NOM	_	3	obj	_	_	2
6	to	to	ADP	_	_	11	case	_	_	*
7	a	a	DET	IND-SG	_	11	det	_	_	*
8	row	row	NOUN	SG-NOM	_	11	compound	_	_	*
9	or	or	CCONJ	_	_	17	cc	_	_	*
10	column	column	NOUN	SG-NOM	_	8	compound	_	_	*
11	field	field	NOUN	SG-NOM	_	3	obl	_	_	*
12	to	to	PART	_	_	13	mark	_	_	*
13	show	show	VERB	INF	_	3	advcl	_	_	*
14	the	the	DET	DEF	_	19	det	_	_	*
15	top	top	NOUN	SG-NOM	_	19	compound	_	_	*
16	or	or	CCONJ	_	_	17	cc	_	_	*
17	bottom	bottom	NOUN	SG-NOM	_	15	conj	_	_	*
18	n	n	NUM	CARD-PL	_	19	nummod	_	_	*
19	items	item	NOUN	PL-NOM	_	13	obj	_	_	*
20	based	base	VERB	PASS	_	19	amod	_	_	1:IAV
21	on	on	ADP	_	_	23	case	_	_	1
22	a	a	DET	IND-SG	_	23	det	_	_	*
23	total	total	ADJ	POS	_	20	obl	_	SpaceAfter=No	*
24	.	.	PUNCT	Period	_	3	punct	_	_	*

